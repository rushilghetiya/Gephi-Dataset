# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LQehIGEZ0Mv0-dGFJaCybouvfXwrjwJU
"""

#Data Sampling
import random
population = list(range(5,203))
sample_size = 10
random_sample = random.sample(population, sample_size)
print("random sample:", random_sample)

import numpy as np
import pandas as pd

data=pd.DataFrame({
    'category': ['A','B','C','D']*25,
    'value':np.random.randn(100)
})

stratified_sample=data.groupby('category',group_keys=False).apply(lambda x:x.sample(2))
print("stratified sample:\n",stratified_sample)

clusters=[list(range(5,20)), list(range(10,30)), list(range(15,40)), list(range(20,50))]
cluster_sample=random.choice(clusters)
print("cluster sample:",cluster_sample)

clusters=[list(range(5,50))]
cluster_sample=random.choice(clusters)
print("cluster sample:",cluster_sample)

import pandas as pd
import numpy as np

data=pd.DataFrame({
    'Values':np.random.randn(2003)
})

summary = data.describe()
print("summary statistics:\n", summary)

import matplotlib.pyplot as plt

data['Values'].hist(bins=20, edgecolor='black',color='red')
plt.xlabel('Values')
plt.ylabel('Frequency')
plt.title('Histogram of Values')
plt.show()

# prompt: make a pie chart

import matplotlib.pyplot as plt
# Sample data for the pie chart
categories = ['Category A', 'Category B', 'Category C', 'Category D']
values = [25, 15, 30, 10]

# Creating the pie chart
plt.pie(values, labels=categories, autopct='%1.1f%%', startangle=90)
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.title('Distribution of Categories')
plt.show()

from sklearn.decomposition import PCA
from sklearn.datasets import load_iris
import matplotlib.pyplot as plt

iris=load_iris()
pca=PCA(n_components=2)
reduced_data=pca.fit_transform(iris.data)

plt.scatter(reduced_data[:,0],reduced_data[:,1],c=iris.target,cmap='viridis')
plt.xlabel('PC1')
plt.ylabel('PC2')
plt.title('PCA of Iris Dataset')
plt.show()
X_pca=pca.fit_transform(iris.data)
X=iris.data
y=iris.target

pca=PCA(n_components=2)
X_pca=pca.fit_transform(X)

from sklearn.decomposition import PCA
from sklearn.datasets import load_iris
import matplotlib.pyplot as plt

iris=load_iris()
pca=PCA(n_components=2)
reduced_data=pca.fit_transform(iris.data)

plt.scatter(reduced_data[:,0],reduced_data[:,1],c=iris.target,cmap='viridis')
plt.xlabel('PC1')
plt.ylabel('PC2')
plt.title('PCA of Iris Dataset')
plt.show()

# prompt: generate parallel coordinates plot

import plotly.express as px

df = px.data.iris()
fig = px.parallel_coordinates(df, color="species_id", labels={"species_id": "Species",
                  "sepal_length": "Sepal Length", "sepal_width": "Sepal Width",
                  "petal_length": "Petal Length", "petal_width": "Petal Width"},
                    color_continuous_scale=px.colors.diverging.Tealrose,
                    color_continuous_midpoint=2)
fig.show()

# prompt: generate parallel coordinates plot

df = px.data.iris()
fig = px.parallel_coordinates(df, color="species_id", labels={"species_id": "Species",
                  "sepal_length": "Sepal Length", "sepal_width": "Sepal Width",
                  "petal_length": "Petal Length", "petal_width": "Petal Width"},
                    color_continuous_scale=px.colors.diverging.Tealrose,
                    color_continuous_midpoint=2)
fig.show()

from pandas.plotting import parallel_coordinates

data=pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/iris-data.csv')
parallel_coordinates(data,'class',color=['red','green','blue'])
plt.title('Parallel Coordinates Plot')
plt.xlabel('Attributes')
plt.ylabel('Values')

plt.show()

import plotly.express as px
import pandas as pd

data=pd.DataFrame({
    'Year' : [2000,2001,2002,2003,2004,2005],
    'Value' : [100,200,150,300,250,400],
    'Country' : ['USA'] * 6
})

fig=px.line(data,x='Year',y='Value',color='Country',title='Time Series Data Visualization')
fig.show()